#
# Check for:
#
# - 1 Octavia CR
# - Deployment with 1 Pod for Octavia CR
# - Octavia-internal Service
# - Octavia-public Service
# - Octavia-internal Route

apiVersion: octavia.openstack.org/v1beta1
kind: Octavia
metadata:
  name: octavia
spec:
  customServiceConfig: |
    [DEFAULT]
    debug = true
  databaseInstance: openstack
  databaseAccount: octavia
  persistenceDatabaseAccount: octavia-persistence
  passwordSelectors:
    service: OctaviaPassword
  preserveJobs: false
  secret: osp-secret
  serviceUser: octavia
  lbMgmtNetwork:
    availabilityZones:
    - zone-1
    manageLbMgmtNetworks: true
    createDefaultLbMgmtNetwork: true
  octaviaAPI:
    customServiceConfig: |
      [DEFAULT]
      debug = true
    databaseInstance: openstack
    databaseAccount: octavia
    persistenceDatabaseAccount: octavia-persistence
    passwordSelectors:
      service: OctaviaPassword
    preserveJobs: false
    replicas: 1
    secret: osp-secret
    serviceUser: octavia
  octaviaHousekeeping:
    customServiceConfig: |
      [DEFAULT]
      debug = true
    databaseInstance: openstack
    databaseAccount: octavia
    persistenceDatabaseAccount: octavia-persistence
    passwordSelectors:
      service: OctaviaPassword
    secret: osp-secret
    serviceUser: octavia
  octaviaHealthManager:
    customServiceConfig: |
      [DEFAULT]
      debug = true
    databaseInstance: openstack
    databaseAccount: octavia
    persistenceDatabaseAccount: octavia-persistence
    passwordSelectors:
      service: OctaviaPassword
    secret: osp-secret
    serviceUser: octavia
  octaviaWorker:
    customServiceConfig: |
      [DEFAULT]
      debug = true
    databaseInstance: openstack
    databaseAccount: octavia
    persistenceDatabaseAccount: octavia-persistence
    passwordSelectors:
      service: OctaviaPassword
    secret: osp-secret
    serviceUser: octavia
status:
  apireadyCount: 1
  healthmanagerreadyCount: 1
  housekeepingreadyCount: 1
  rsyslogreadyCount: 1
  conditions:
  - message: Setup complete
    reason: Ready
    status: "True"
    type: Ready
  - message: Create service completed
    reason: Ready
    status: "True"
    type: CreateServiceReady
  - message: DB create completed
    reason: Ready
    status: "True"
    type: DBReady
  - message: DBsync completed
    reason: Ready
    status: "True"
    type: DBSyncReady
  - message: Input data complete
    reason: Ready
    status: "True"
    type: InputReady
  - message: MariaDBAccount creation complete
    reason: Ready
    status: "True"
    type: MariaDBAccountReady
  - message: NetworkAttachments completed
    reason: Ready
    status: "True"
    type: NetworkAttachmentsReady
  - message: Setup complete
    reason: Ready
    status: "True"
    type: OctaviaAPIReady
  - message: Octavia Amphora certificates setup completed
    reason: Ready
    status: "True"
    type: OctaviaAmphoraCertsReady
  - message: Octavia Amphora Images setup completed
    reason: Ready
    status: "True"
    type: OctaviaAmphoraImagesReady
  - message: Octavia Amphora SSH setup completed
    reason: Ready
    status: "True"
    type: OctaviaAmphoraSSHReady
  - message: Setup complete
    reason: Ready
    status: "True"
    type: OctaviaHealthManagerReady
  - message: Setup complete
    reason: Ready
    status: "True"
    type: OctaviaHousekeepingReady
  - message: Octavia Management Network setup completed
    reason: Ready
    status: "True"
    type: OctaviaManagementNetworkReady
  - message: Octavia quotas setup completed
    reason: Ready
    status: "True"
    type: OctaviaQuotasReady
  - message: Setup complete
    reason: Ready
    status: "True"
    type: OctaviaRsyslogReady
  - message: Setup complete
    reason: Ready
    status: "True"
    type: OctaviaWorkerReady
  - message: RabbitMqTransportURL successfully created
    reason: Ready
    status: "True"
    type: RabbitMqTransportURLReady
  - message: RoleBinding created
    reason: Ready
    status: "True"
    type: RoleBindingReady
  - message: Role created
    reason: Ready
    status: "True"
    type: RoleReady
  - message: ServiceAccount created
    reason: Ready
    status: "True"
    type: ServiceAccountReady
  - message: Service config create completed
    reason: Ready
    status: "True"
    type: ServiceConfigReady
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: octavia-api
spec:
  replicas: 1
  template:
    metadata:
      labels:
        service: octavia
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: service
                  operator: In
                  values:
                  - octavia-api
              topologyKey: kubernetes.io/hostname
            weight: 100
      automountServiceAccountToken: false
      containers:
      - args:
        - -c
        - /usr/local/bin/kolla_start
        command:
        - /bin/bash
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthcheck
            port: 9876
            scheme: HTTP
          initialDelaySeconds: 3
          periodSeconds: 13
          successThreshold: 1
          timeoutSeconds: 15
        name: octavia-api
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthcheck
            port: 9876
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 15
        securityContext:
          runAsUser: 42437
          runAsGroup: 42437
          runAsNonRoot: true
      - env:
        - name: CONFIG_HASH
        - name: KOLLA_CONFIG_STRATEGY
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthcheck
            port: 9876
            scheme: HTTP
          initialDelaySeconds: 3
          periodSeconds: 13
          successThreshold: 1
          timeoutSeconds: 15
        name: octavia-api-provider-agent
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthcheck
            port: 9876
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 15
          successThreshold: 1
          timeoutSeconds: 15
      initContainers:
      - args:
        - -c
        - /usr/local/bin/container-scripts/init.sh
        command:
        - /bin/bash
        imagePullPolicy: IfNotPresent
        name: init
        resources: {}
        securityContext:
          runAsUser: 42437
          runAsGroup: 42437
          runAsNonRoot: true
      restartPolicy: Always
      serviceAccount: octavia-octavia
      serviceAccountName: octavia-octavia
status:
  availableReplicas: 1
  replicas: 1
---
# the openshift annotations can't be checked through the deployment above
apiVersion: v1
kind: Pod
metadata:
  annotations:
    openshift.io/scc: anyuid
  labels:
    service: octavia
---
apiVersion: v1
kind: Service
metadata:
  labels:
    endpoint: internal
    service: octavia
  name: octavia-internal
spec:
  ports:
    - name: octavia-internal
  selector:
    service: octavia
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  labels:
    endpoint: public
    service: octavia
  name: octavia-public
spec:
  ports:
    - name: octavia-public
  selector:
    service: octavia
  type: ClusterIP
---
# when using image digests the containerImage URLs are SHA's so we verify them with a script
apiVersion: kuttl.dev/v1beta1
kind: TestAssert
commands:
  - script: |
      tupleTemplate='{{ range (index .spec.template.spec.containers 1).env }}{{ .name }}{{ "#" }}{{ .value}}{{"\n"}}{{ end }}'
      imageTuples=$(oc get -n openstack-operators deployment octavia-operator-controller-manager -o go-template="$tupleTemplate")
      for ITEM in $(echo $imageTuples); do
        # it is an image
        if echo $ITEM | grep 'RELATED_IMAGE' &> /dev/null; then
          NAME=$(echo $ITEM | sed -e 's|^RELATED_IMAGE_OCTAVIA_\([^_]*\)_.*|\1|')
          IMG_FROM_ENV=$(echo $ITEM | sed -e 's|^.*#\(.*\)|\1|')
          case $NAME in
            API)
              template='{{.spec.octaviaAPI.containerImage}}'
              ;;
            HOUSEKEEPING)
              template='{{.spec.octaviaHousekeeping.containerImage}}'
              ;;
            HEALTHMANAGER)
              template='{{.spec.octaviaHealthManager.containerImage}}'
              ;;
            WORKER)
              template='{{.spec.octaviaWorker.containerImage}}'
              ;;
            APACHE)
              template='{{.spec.apacheContainerImage}}'
              ;;
            RSYSLOG)
              template='{{.spec.octaviaRsyslog.containerImage}}'
              ;;
          esac
          SERVICE_IMAGE=$(oc get -n $NAMESPACE octavia octavia -o go-template="$template")
          if [ "$SERVICE_IMAGE" != "$IMG_FROM_ENV" ]; then
            echo "$NAME image does not equal $IMG_FROM_ENV (its current value is $SERVICE_IMAGE)"
            exit 1
          fi
        fi
      done
      exit 0
  - script: |
      # Check that the octavia-healthmanager pod has 2 IP addresses on the octavia interface and a route to lb-mgmt-subunet
      pod=$(oc get pods -n $NAMESPACE -l service=octavia-healthmanager --field-selector=status.phase=Running -o name | head -1)
      if [ "$pod" = "" ]; then
        exit 1
      fi
      # Note: $pod already includes the resource type (ex: pod/octavia-healthmanager-xxxxx)
      node_name=$(oc get -n $NAMESPACE $pod -o go-template='{{.spec.nodeName}}')
      octavia_fixed_ip=$(oc get configmaps -n $NAMESPACE octavia-hmport-map -o json | jq -r '.data["hm_'$node_name'"]')
      n_matches=$(oc logs -n $NAMESPACE -c init "$pod" |
          grep -e "addr 172.23.*/24 dev octavia" \
               -e "addr $octavia_fixed_ip/32 dev octavia" \
               -e "route 172.24.0.0/16 via 172.23.0.150 dev octavia" | wc -l)
      if [ "$n_matches" != "3" ]; then
        exit 1
      fi
      exit 0
  - script: |
      n_matches=$(oc get secrets -n $NAMESPACE octavia-worker-config-data -o jsonpath="{$.data['octavia\.conf']}" | base64 -d |
          grep -e '^jobboard_enabled = true$' \
               -e '^jobboard_backend_hosts = octavia-redis-redis-0\.octavia-redis-redis\.' | wc -l)
      if [ "$n_matches" != 2 ]; then
        exit 1
      fi
      exit 0
